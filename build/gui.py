
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


import pathlib
# import tkinter as tk
from tkinter import INSERT
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, scrolledtext, ttk, filedialog, END, WORD
import os
import sys
import shutil
import urllib.parse
import threading
import datetime
import subprocess

cwd = os.getcwd()

DaveArticleScraperDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

if DaveArticleScraperDir != r"C:\Users\aglis\Documents\Python_Projects\DaveArticleScraper":
    # print('rerouted DaveArticleScraperDir')
    DaveArticleScraperDir = cwd

sys.path.append(DaveArticleScraperDir)

from glyphilator import wordlists_from_folder,constructBasicGlyphs,searchlist_from_txtFile
from pubmedFetcher import pubmedResults
from paragraphParser import articleParse,txtFileParse
from asyncPubmedFetcher import pubmedResultsAsync


############################################################################################################
#GLOBAL VARIABLES
############################################################################################################

OUTPUT_PATH = pathlib.Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / os.path.join(cwd, 'build', "assets" ,"frame0")


wordlist_paths = {
    '.!button': os.path.join(DaveArticleScraperDir,"wordlists","group_1"),
    '.!button2': os.path.join(DaveArticleScraperDir,"wordlists","group_2"),
    '.!button3': os.path.join(DaveArticleScraperDir,"wordlists","group_3"),
    '.!button4': os.path.join(DaveArticleScraperDir,"wordlists","group_4"),
    '.!button5': os.path.join(DaveArticleScraperDir,"wordlists","group_5"),
    '.!button6': os.path.join(DaveArticleScraperDir,"wordlists","group_6"),
    '.!button7': os.path.join(DaveArticleScraperDir,"wordlists","group_7")

}
most_recent_wordlist_used = None


current_wordlist_folder = wordlist_paths[".!button"]
last_button_clicked = None #{'button': None}
pubmed_search_url = None
custom_url_searchlist = None
final_wordlists = None
final_articleData = None
num_results_requested = 200
search_metadata = {
                                            "geometrySelection": "Toroid", 
                                            "wordlist_paths" : ["path/to/WL1.txt","path/to/WL2.txt","path/to/WL3.txt"],
                                            "search_fuzziness":0.6,
                                            "search_string": "sample string",
                                            "num_results_requested": 200,
                                            "scaling_range": (0.2,2.5),
                                            "scaling_type": "minmax",
                                            "scaling_scope":"dataset"} #determines if glyphs scaling is relative to max and min of whole dataset, or just 1 glyph.

############################################################################################################
# Definitions
############################################################################################################
class RedirectText:
    def __init__(self, widget):
        self.widget = widget

    def write(self, string):
        # Write to the ScrolledText widget
        self.widget.insert(END, string)
        self.widget.yview(END)  # Auto-scroll to the bottom
        
        # Also write to the terminal
        sys.__stdout__.write(string)  # This sends the output to the terminal

    def flush(self):
        # Flush is required for compatibility
        pass

def relative_to_assets(path: str) -> pathlib.Path:
    return ASSETS_PATH / pathlib.Path(path)

def button_click(button, button_image, button_selected_image):
    global last_button_clicked
    
    # Reset previous button if one was clicked before
    if last_button_clicked != None:
        last_button_clicked['button'].config(image=last_button_clicked['image'])
        
    
    # Update current button to highlighted state
    button.config(image=button_selected_image)
    last_button_clicked = {'button': button, 'image': button_image}  # Update tracking
    
    return None

def list_txt_files_in_folder(filepath):
    files = os.listdir(filepath)
    

    list_txt_filepaths = []
    for file in files:
        if file.endswith('.txt'):
            list_txt_filepaths.append(filepath + r"\\" + file)
    
    listNames = []
    for path in list_txt_filepaths:
        listNames.append(os.path.basename(path))

    str_listNames = "\n".join(listNames)
    
    return str_listNames

def display_current_wordlist():
     
    global current_wordlist_folder
    global max_scale
    global min_scale

    #first clear scrollable text window
    wordlistsScrollable.delete("1.0", END)

    if last_button_clicked == None:
        return
    
    key = str(last_button_clicked["button"])

    current_wordlist_folder = wordlist_paths[key]
    stringTxtFiles = list_txt_files_in_folder(current_wordlist_folder)

    wordlistsScrollable.insert(INSERT,stringTxtFiles)

    #pre-setting recommended max scaling value
    fileCount = len(os.listdir(current_wordlist_folder))

    x = fileCount
    scalingDict = {"Sphere":(19*x**2)/(x**3),
                   "Cube":(19*x**2)/(x**3),
                   "Octahedron":(19*x**2)/(x**3),
                   "Toroid": (19*x**2)/(x**3)
                   }

    max_scale.delete(0,END)
    max_scale.insert(0,scalingDict[geometryDropdown.get()])

def upload_to_group():
    global upload_filepath

    #asking user for filepaths to the files they want to upload
    upload_filepaths = filedialog.askopenfilenames()
    
    #copying each uploaded file into current group directory
    for file in upload_filepaths:
        shutil.copy(file,current_wordlist_folder)

    #updating the group to accurately describe updated wordlists.
    display_current_wordlist()

def delete_from_group():
    to_delete_filepaths = filedialog.askopenfilenames(initialdir=current_wordlist_folder, title="Select file(s) to delete from group")
    for file in to_delete_filepaths:
        os.remove(file)
    display_current_wordlist()

def upload_url_list():
    global custom_url_searchlist
    global pubmed_search_url
    global num_results_requested
    global search_metadata
    
    #generating custom url searchlist, find path, parse the txt, and assign to custom_url_searchlist
    url_list_path = filedialog.askopenfilename()
    custom_url_searchlist = searchlist_from_txtFile(url_list_path)
    url_searchlist_textbox.config(state='normal')
    url_searchlist_textbox.delete(0,END)
    # url_searchlist_textbox.insert(INSERT,os.path.basename(url_list_path))
    url_searchlist_textbox.insert(INSERT,url_list_path)
    url_searchlist_textbox.config(state='readonly')
    
    #global search string # gotta delete any data that may be in the manual searchbar
    entry_1.delete(0,END)
    pubmed_search_url = None #delete the url that was generated as part of confirm_pubmed_search as well
    num_results_requested = None

    #uploading search_metadata["search_string"] with path of the url list
    search_metadata["search_string"] = url_list_path

def confirm_pubmed_search():
    global custom_url_searchlist #gptta delete any data relevant to custom URL searchlisting
    global pubmed_search_url
    global num_results_requested
    global search_metadata
    global requested_results_text
    global url_searchlist_textbox
    global entry_1

    
    num_results_requested = int(requested_results_text.get())
    search_string = entry_1.get()
    
    #deleting data related to custom URL list searching. Cant search both ways! ....YET
    custom_url_searchlist = None
    url_searchlist_textbox.config(state='normal')
    url_searchlist_textbox.delete(0,END)
    url_searchlist_textbox.config(state='readonly')

    #generating pubmed url
    search_words = search_string.split()
    
    
    url_search_words = []
    for word in search_words:
        url_search_words.append(urllib.parse.quote(word))

    start_url = "https://pubmed.ncbi.nlm.nih.gov/?term="    
    middle_url = '+'.join(url_search_words)
    end_url = "&size=200"

    pubmed_search_url = start_url + middle_url + end_url

    #updating search_metadata with the search string
    search_metadata["search_string"] = search_string
    
def parse_wordlist_and_search():

    global final_wordlists
    global final_articleData
    global most_recent_wordlist_used

    most_recent_wordlist_used = current_wordlist_folder

    
    final_wordlists = wordlists_from_folder(current_wordlist_folder)
    antz_base_path = os.path.join(cwd, "antz", "antz")

    if pubmed_search_url != None:
        final_articleData = pubmedResults(pubmed_search_url,num_results_requested=num_results_requested)
    if custom_url_searchlist != None:
        final_articleData = []
        for url in custom_url_searchlist:
            if os.path.exists(url) == True: #if the string is a filepath, parse it like txt file
                txtfiledata = txtFileParse(url)
                final_articleData.append(txtfiledata)
                print("text file processed")
                continue
            urlData = articleParse(url)
            final_articleData.append(urlData)
    print("Done. All Media Data compiled")
    # else:
    #     print('This wordlist has already been parsed')

def construct_viz_data():
    global search_metadata
    global final_articleData

    final_wordlists = wordlists_from_folder(current_wordlist_folder)
    

    #create a new directory each time the button is pressed, storing the new viz
    folder_date = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    date_noDash = str(datetime.datetime.now().strftime('%Y%m%d'))
    # midnight = datetime.datetime.combine(datetime.datetime.today(), datetime.datetime.min.time())
    # current_time = str(int((datetime.datetime.now() - midnight).total_seconds()))

    current_time = datetime.datetime.now().strftime('%H%M%S')
    
    date_directory_path = os.path.join(cwd,'antz','antz','User','Prototypes', folder_date)
   
     #making the date directory in antz/user/prototypes
    try:
        os.mkdir(date_directory_path)
    except OSError:
        pass
    time_directory_name = "proto-" + date_noDash + "T" + current_time
    time_directory_path = os.path.join(date_directory_path,time_directory_name)

    #making the time directory
    os.mkdir(time_directory_path)
    directory1 = pathlib.Path(os.path.join(cwd,"antz","antz", "User", "Prototypes", "0_DO_NOT_DELETE", "articleScraperOutput"))

    for file in directory1.rglob("*"):

        destination = time_directory_path / file.relative_to(directory1)

        if file.is_file():
            # Ensure parent directory exists in destination, then copy the file
            destination.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy(file, destination)
        elif file.is_dir():
            # Ensure the directory exists in the destination
            destination.mkdir(parents=True, exist_ok=True)

    

    #  collecting metadata related to search. 
    # # Copying Wordlists into folder
    wordlist_destination = os.path.join(time_directory_path,"search_metadata","wordlists")
    os.makedirs(wordlist_destination,exist_ok=True) 
    for file in pathlib.Path(current_wordlist_folder).rglob("*"):
        shutil.copy(file,wordlist_destination)

    antz_base_path = os.path.join(cwd, "antz", "antz")

    wordlists = os.listdir(current_wordlist_folder) # i need to copy the paths this way because thats how i make the wordlists in glyphilator function. Dont wanna risk pathlib putting wordlists out of order
    list_txt_filepaths = []
    for file in wordlists:
        if file.endswith('.txt'):
            wordlist_abs_path = wordlist_destination + r"\\" + file
            list_txt_filepaths.append(os.path.relpath(wordlist_abs_path,antz_base_path))
    
    #copying the custom url searchlist txt file into the wordlist destination folder, and setting search_metadata["search_string"] to point to the copied url
    if custom_url_searchlist != None:
        search_metadata["search_string"] = url_searchlist_textbox.get()
        # print("search string = ", search_metadata["search_string"])
        shutil.copy(search_metadata["search_string"],wordlist_destination)
        search_metadata["search_string"] = os.path.relpath(wordlist_destination + r"\\" + os.path.basename(search_metadata["search_string"]),antz_base_path)
        #copying the filepath
        # print(custom_url_searchlist)
        search_file_destination = os.path.join(time_directory_path,"search_metadata","searched_files")
        os.mkdir(search_file_destination)
        # list_custom_files_paths = []
        for i in range(0,len(custom_url_searchlist)):
            if os.path.exists(custom_url_searchlist[i]) == True: #if the item is a filepath, copy the file into the search_metadata/searched_files dir, change the articledata["url"] to be the copied filepath
                file_abs_path = search_file_destination + r"\\" + os.path.basename(custom_url_searchlist[i])
                final_articleData[i]["url"] = os.path.relpath(file_abs_path,antz_base_path)
                shutil.copy(custom_url_searchlist[i],search_file_destination)

    search_metadata["wordlist_paths"] = list_txt_filepaths
    # search_metadata["custom_list_file_paths"] = list_custom_files_paths
    # if custom_url_searchlist == None: search_metadata['search_string'] = [entry_1.get()] #THIS INFO WAS ASSIGNED WHEN SEARCH CONFIRM BUTTON CLIckEd AND when URL SEARCHLIST UPLOADED
    # if custom_url_searchlist != None: search_metadata['search_string'] = ["Used URL Searchlist", url_searchlist_textbox.get()]
    search_metadata["geometrySelection"] = geometryDropdown.get()
    search_metadata["num_results_requested"] = num_results_requested
    search_metadata["scaling_range"] = (float(max_scale.get())/(6),float(max_scale.get())) #min scale is 1/6 the max scale
    # print(search_metadata["scaling_range"])

    print('generating antz and tag file. \n Initializing parallel processing')
    # print("scaling scope when buttonpressed is:",search_metadata["scaling_scope"])
    #replacing articleScraperOutput_np_node, and articleScraperOutput_np_tag with our newly calculated versions
    # final_allGlyphData = generateGlyphInput(final_articleData,final_wordlists,search_metadata)
    antzfile,tagfile = constructBasicGlyphs(final_articleData,final_wordlists,search_metadata)
    antzfile.to_csv(os.path.join(time_directory_path,'csv',"articleScraperOutput_np_node.csv"),index=False,encoding="utf-8")
    tagfile.to_csv(os.path.join(time_directory_path,'csv',"articleScraperOutput_np_tag.csv"),index=False,encoding="utf-8")

def open_in_antz():

    all_date_dirs = os.listdir(os.path.join(cwd,'antz','antz','User','Prototypes'))
    # print(all_date_dirs)

    most_recent_date = all_date_dirs[-1]
    all_time_dirs = os.listdir(os.path.join(cwd,'antz','antz','User','Prototypes',most_recent_date))
    
    most_recent_time = all_time_dirs[-1]

    bat_file_path = os.path.join(cwd,'antz','antz','User','Prototypes',most_recent_date,most_recent_time,'articleScraperOutput_npe.bat')
    # print(bat_file_path)
    subprocess.Popen(bat_file_path,shell=True,cwd=pathlib.Path(bat_file_path).parent)
    # try:
    #     os.startfile(bat_file_path)
    # except:
    #     subprocess.Popen(bat_file_path)
    #     print('operation on non-windows OS not yet supported')

def change_glyph_geo_selection(event):
    global search_metadata

    search_metadata["geometrySelection"] = geometryDropdown.get()
    print("Glyph geometry changed to", search_metadata["geometrySelection"])

def main():
    global wordlistsScrollable
    global entry_1
    global requested_results_text
    global url_searchlist_textbox
    global geometryDropdown
    global max_scale
    global min_scale

    window = Tk()

    window.geometry("853x655") #+200 pixels in y dir
    window.configure(bg = "#1C375E")


    canvas = Canvas(
        window,
        bg = "#1C375E",
        height = 655,
        width = 853,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        160.0,
        120.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=21.0,
        y=107.0,
        width=228.0,
        height=24.0
    )

    canvas.create_text(
        21.0,
        83.0,
        anchor="nw",
        text="Enter Search String",
        fill="#FFFFFF",
        font=("Inter", 20 * -1)
    )
    canvas.create_text(
        225,
        90.0,
        anchor="nw",
        text="(num results requested)",
        fill="#FFFFFF",
        font=("Inter", 10 * -1)
    )

    canvas.create_text(
        341.0+90,
        83.0,
        anchor="nw",
        text="Upload Custom URL List",
        fill="#FFFFFF",
        font=("Inter", 20 * -1)
    )

    canvas.create_text(
        21.0,
        174.0,
        anchor="nw",
        text="Wordlists to Search Against",
        fill="#FFFBFB",
        font=("Inter", 15 * -1)
    )

    canvas.create_rectangle(
        21.0,
        192.0,
        72.0,
        360.0,
        fill="#5DA2BE",
        outline="")

    #the min and max scaling text boxes
    canvas.create_text(21,460, anchor="nw", text="Glyph Scaling (Min Max)", fill="#FFFFFF", font=("Inter", 15 * -1))
    min_scale = Entry(window)
    min_scale.place(x = 21, y = 480, height=26, width=35)
    min_scale.insert(0,"0.2")

    max_scale = Entry(window)
    max_scale.place(x = 60, y = 480, height=26, width=35)
    max_scale.insert(0,"2.5")

    #the upload url searchlist text editor
    url_searchlist_textbox = Entry(window)
    url_searchlist_textbox.place(x=341+90,y=107,width=148,height=26) #x+30

    #the requested results bar
    requested_results_text = Entry(window)
    requested_results_text.place(x=265 , y=107, width=50, height=26)
    requested_results_text.insert(0,'200')  

    #The Wordlists.txt viewer 
    wordlistsScrollable = scrolledtext.ScrolledText(window, wrap = WORD)
    wordlistsScrollable.place(x=72,y=192,width=262,height=168)

    #writing print messages to status terminal
    terminalScrollable = scrolledtext.ScrolledText(window, wrap = WORD)
    terminalScrollable.place(x=526,y=390,width=320,height=200)
    sys.stdout = RedirectText(terminalScrollable)

    #the select geometry choice dropdown (combobox)
    canvas.create_text(21,400, anchor="nw", text="Glyph Geometry", fill="#FFFFFF", font=("Inter", 15 * -1))
    geometryDropdown = ttk.Combobox(values = ["Sphere","Toroid","Cube","Octahedron"]) #plan to add cylinder
    geometryDropdown.place(x=21, y=420, height=26, width=100)
    geometryDropdown.bind("<<ComboboxSelected>>", change_glyph_geo_selection)
    geometryDropdown.insert(0,'Toroid')

    #create the fuzzifier slider
    canvas.create_text(415,174, anchor="nw", text="Search Fuzziness", fill="#FFFFFF", font=("Inter", 15 * -1))
    canvas.create_text(415,200, anchor="nw", text="Require \nany match", fill="#FFFFFF", font=("Inter", 11 * -1))
    canvas.create_text(590,200, anchor="nw", text="Require \nexact match", fill="#FFFFFF", font=("Inter", 11 * -1))

    fuzzifier_val = 0.6
    def fuzzifier_changed(event):
        global search_metadata
        search_metadata["search_fuzziness"] = round(fuzzifier.get(),2)
        print("Search Fuzziness Changed to:", search_metadata["search_fuzziness"])
    fuzzifier = ttk.Scale(window, from_=0, to=1, variable=fuzzifier_val,command=fuzzifier_changed)
    fuzzifier.set(0.6)

    fuzzifier.place(x=480, y=200,height=26, width=100)

    #create dropdown to select scaling type
    canvas.create_text(21,530, anchor="nw", text="Scaling Type", fill="#FFFFFF", font=("Inter", 15 * -1))
    scaletypeDropdown = ttk.Combobox(values=["minmax"],)
    scaletypeDropdown.place(x=21, y=550, height=26, width=100)
    scaletypeDropdown.set("minmax")
    def scaletypeChanged(event):
        global search_metadata
        search_metadata["scaling_type"] = scaletypeDropdown.get()
        print("scaling type changed to",search_metadata["scaling_type"])
    scaletypeDropdown.bind("<<ComboboxSelected>>",scaletypeChanged)

    #Create the dropdown to select scaling scope (by gyph or by dataset)
    canvas.create_text(21,580, anchor="nw", text="Scaling Scope", fill="#FFFFFF", font=("Inter", 15 * -1))
    scalescopeDropdown = ttk.Combobox(values=["dataset","glyph"])
    scalescopeDropdown.place(x=21, y=600, height=26, width=100)
    scalescopeDropdown.set("dataset")
    def scalescopeChanged(event):
        global search_metadata
        search_metadata["scaling_scope"] = scalescopeDropdown.get()
        print("scaling type changed to",search_metadata["scaling_scope"])
    scalescopeDropdown.bind("<<ComboboxSelected>>",scalescopeChanged)

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_selected_image_1 = PhotoImage(
        file=relative_to_assets("button_1_selected.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (button_click(button_1,button_image_1,button_selected_image_1),
                        print("Group 1 Selected"),
                        display_current_wordlist()),
        relief="flat"
    )
    button_1.place(
        x=21.0,
        y=192.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_1 = PhotoImage(
        file=relative_to_assets("button_hover_1.png"))

    def button_1_hover(e):
        if id(last_button_clicked['button']) == id(button_1):
            return
        button_1.config(
            image=button_image_hover_1
        )
    def button_1_leave(e):
        
        if id(last_button_clicked['button']) != id(button_1):
            button_1.config(image=button_image_1)
        
        

    button_1.bind('<Enter>', button_1_hover)
    button_1.bind('<Leave>', button_1_leave)


    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_selected_image_2 = PhotoImage(
        file=relative_to_assets("button_2_selected.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (button_click(button_2,button_image_2,button_selected_image_2),
                        print("Group 2 Selected"),
                        display_current_wordlist()),
                    
        relief="flat"
    )
    button_2.place(
        x=21.0,
        y=216.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_2 = PhotoImage(
        file=relative_to_assets("button_hover_2.png"))

    def button_2_hover(e):
        if id(last_button_clicked['button']) == id(button_2):
            return
        button_2.config(
            image=button_image_hover_2
        )
    def button_2_leave(e):

        if id(last_button_clicked['button']) != id(button_2):
            button_2.config(image=button_image_2)
        # button_2.config(
        #     image=button_image_2
        # )

    button_2.bind('<Enter>', button_2_hover)
    button_2.bind('<Leave>', button_2_leave)


    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_selected_image_3 = PhotoImage(
        file=relative_to_assets("button_3_selected.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (button_click(button_3,button_image_3,button_selected_image_3),
                        display_current_wordlist(),
                        print("Group 3 Selected")),
        relief="flat"
    )
    button_3.place(
        x=21.0,
        y=240.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_3 = PhotoImage(
        file=relative_to_assets("button_hover_3.png"))

    def button_3_hover(e):
        if id(last_button_clicked['button']) == id(button_3):
            return
        button_3.config(
            image=button_image_hover_3
        )
    def button_3_leave(e):

        if id(last_button_clicked['button']) != id(button_3):
            button_3.config(image=button_image_3)
        # button_3.config(
        #     image=button_image_3
        # )

    button_3.bind('<Enter>', button_3_hover)
    button_3.bind('<Leave>', button_3_leave)


    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    button_selected_image_4 = PhotoImage(
        file=relative_to_assets("button_4_selected.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (button_click(button_4,button_image_4,button_selected_image_4),
                        display_current_wordlist(),
                        print("Group 4 Selected")),
        relief="flat"
    )
    button_4.place(
        x=21.0,
        y=264.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_4 = PhotoImage(
        file=relative_to_assets("button_hover_4.png"))

    def button_4_hover(e):
        if id(last_button_clicked['button']) == id(button_4):
            return
        button_4.config(
            image=button_image_hover_4
        )
    def button_4_leave(e):
        if id(last_button_clicked['button']) != id(button_4):
            button_4.config(image=button_image_4)
        # button_4.config(
        #     image=button_image_4
        # )

    button_4.bind('<Enter>', button_4_hover)
    button_4.bind('<Leave>', button_4_leave)


    button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    button_selected_image_5 = PhotoImage(
        file=relative_to_assets("button_5_selected.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (button_click(button_5,button_image_5,button_selected_image_5),
                        display_current_wordlist(),
                        print("Group 5 Selected")),
        relief="flat"
    )
    button_5.place(
        x=21.0,
        y=288.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_5 = PhotoImage(
        file=relative_to_assets("button_hover_5.png"))

    def button_5_hover(e):
        if id(last_button_clicked['button']) == id(button_5):
            return
        button_5.config(
            image=button_image_hover_5
        )
    def button_5_leave(e):
        if id(last_button_clicked['button']) != id(button_5):
            button_5.config(image=button_image_5)
        # button_5.config(
        #     image=button_image_5
        # )

    button_5.bind('<Enter>', button_5_hover)
    button_5.bind('<Leave>', button_5_leave)


    button_image_6 = PhotoImage(
        file=relative_to_assets("button_6.png"))
    button_selected_image_6 = PhotoImage(
        file=relative_to_assets("button_6_selected.png"))
    button_6 = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (button_click(button_6,button_image_6,button_selected_image_6),
                        display_current_wordlist(),
                        print("Group 6 Selected")),
        relief="flat"
    )
    button_6.place(
        x=21.0,
        y=312.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_6 = PhotoImage(
        file=relative_to_assets("button_hover_6.png"))

    def button_6_hover(e):
        if id(last_button_clicked['button']) == id(button_6):
            return
        button_6.config(
            image=button_image_hover_6
        )
    def button_6_leave(e):
        if id(last_button_clicked['button']) != id(button_6):
            button_6.config(image=button_image_6)
        # button_6.config(
        #     image=button_image_6
        # )

    button_6.bind('<Enter>', button_6_hover)
    button_6.bind('<Leave>', button_6_leave)


    button_image_7 = PhotoImage(
        file=relative_to_assets("button_7.png"))
    button_selected_image_7 = PhotoImage(
        file=relative_to_assets("button_7_selected.png"))
    button_7 = Button(
        image=button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (button_click(button_7,button_image_7,button_selected_image_7),
                        display_current_wordlist(),
                        print("Group 7 Selected")),
        relief="flat"
    )
    button_7.place(
        x=21.0,
        y=336.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_7 = PhotoImage(
        file=relative_to_assets("button_hover_7.png"))

    def button_7_hover(e):
        if id(last_button_clicked['button']) == id(button_7):
            return
        button_7.config(
            image=button_image_hover_7
        )
    def button_7_leave(e):
        if id(last_button_clicked['button']) != id(button_7):
            button_7.config(image=button_image_7)
        # button_7.config(
        #     image=button_image_7
        # )

    button_7.bind('<Enter>', button_7_hover)
    button_7.bind('<Leave>', button_7_leave)


    button_image_8 = PhotoImage(
        file=relative_to_assets("button_8.png"))
    button_8 = Button(
        image=button_image_8,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (print("button_8 clicked"),
                        upload_url_list(),
                        print("Found URL or Filepath:",len(custom_url_searchlist))),
        relief="flat"
    )
    button_8.place(
        x=496.0+86,
        y=107.0,
        width=51.0,
        height=26.0
    )

    button_image_hover_8 = PhotoImage(
        file=relative_to_assets("button_hover_8.png"))

    def button_8_hover(e):
        button_8.config(
            image=button_image_hover_8
        )
    def button_8_leave(e):
        button_8.config(
            image=button_image_8
        )

    button_8.bind('<Enter>', button_8_hover)
    button_8.bind('<Leave>', button_8_leave)


    button_image_9 = PhotoImage(
        file=relative_to_assets("button_9.png"))
    button_9 = Button(
        image=button_image_9,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (print("button_9 clicked"),
                        upload_to_group()),
        relief="flat"
    )
    button_9.place(
        x=338.0,
        y=334.0,
        width=51.0,
        height=26.0
    )

    button_image_hover_9 = PhotoImage(
        file=relative_to_assets("button_hover_9.png"))

    def button_9_hover(e):
        button_9.config(
            image=button_image_hover_9
        )
    def button_9_leave(e):
        button_9.config(
            image=button_image_9
        )

    button_9.bind('<Enter>', button_9_hover)
    button_9.bind('<Leave>', button_9_leave)


    button_image_10 = PhotoImage(
        file=relative_to_assets("button_10.png"))
    button_10 = Button(
        image=button_image_10,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (print("Collecting Media Content"),
                        threading.Thread(target=parse_wordlist_and_search).start(),
        ),
        relief="flat"
    )
    button_10.place(
        x=526.0,
        y=406.0+200,
        width=100.0,
        height=37.0
    )

    button_image_hover_10 = PhotoImage(
        file=relative_to_assets("button_hover_10.png"))

    def button_10_hover(e):
        button_10.config(
            image=button_image_hover_10
        )
    def button_10_leave(e):
        button_10.config(
            image=button_image_10
        )

    button_10.bind('<Enter>', button_10_hover)
    button_10.bind('<Leave>', button_10_leave)


    button_image_11 = PhotoImage(
        file=relative_to_assets("button_11.png"))
    button_11 = Button(
        image=button_image_11,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (threading.Thread(target=construct_viz_data).start(),
                         
                        ),
        relief="flat"
    )
    button_11.place(
        x=634.0,
        y=406.0+200,
        width=100.0,
        height=37.0
    )

    button_image_hover_11 = PhotoImage(
        file=relative_to_assets("button_hover_11.png"))

    def button_11_hover(e):
        button_11.config(
            image=button_image_hover_11
        )
    def button_11_leave(e):
        button_11.config(
            image=button_image_11
        )

    button_11.bind('<Enter>', button_11_hover)
    button_11.bind('<Leave>', button_11_leave)


    button_image_12 = PhotoImage(
        file=relative_to_assets("button_12.png"))
    button_12 = Button(
        image=button_image_12,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (print("button_12 clicked"),
                        open_in_antz()),
        relief="flat"
    )
    button_12.place(
        x=742.0,
        y=406.0+200,
        width=100.0,
        height=37.0
    )

    button_image_hover_12 = PhotoImage(
        file=relative_to_assets("button_hover_12.png"))

    def button_12_hover(e):
        button_12.config(
            image=button_image_hover_12
        )
    def button_12_leave(e):
        button_12.config(
            image=button_image_12
        )

    button_12.bind('<Enter>', button_12_hover)
    button_12.bind('<Leave>', button_12_leave)


    # print(relative_to_assets('button_13.png'))
    button_image_13 = PhotoImage(
        file=os.path.join(DaveArticleScraperDir,'build','assets','frame0','button_13.PNG'))
    button_13 = Button(
        image=button_image_13,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (print("button_13 clicked"),
                        
                        confirm_pubmed_search()),
                        
        relief="flat"
    )
    button_13.place(
        x=302,
        y=107.0,
        width=51.0,
        height=26.0
    )

    button_image_hover_13 = PhotoImage(
        file=os.path.join(DaveArticleScraperDir,'build','assets','frame0','button_hover_13.PNG'))

    def button_13_hover(e):
        button_13.config(
            image=button_image_hover_13
        )
    def button_13_leave(e):
        button_13.config(
            image=button_image_13
        )

    button_13.bind('<Enter>', button_13_hover)
    button_13.bind('<Leave>', button_13_leave)

    button_image_14 = PhotoImage(
        file=os.path.join(DaveArticleScraperDir,'build','assets','frame0','button_14.png'))
    button_14 = Button(
        image=button_image_14,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (print("button_14 clicked"),
                        delete_from_group()),
        relief="flat"
    )
    button_14.place(
        x=338.0,
        y=334.0-28,
        width=51.0,
        height=26.0
    )

    button_image_hover_14 = PhotoImage(
        file=os.path.join(DaveArticleScraperDir,'build','assets','frame0','button_hover_14.png'))

    def button_14_hover(e):
        button_14.config(
            image=button_image_hover_14
        )
    def button_14_leave(e):
        button_14.config(
            image=button_image_14
        )

    button_14.bind('<Enter>', button_14_hover)
    button_14.bind('<Leave>', button_14_leave)

    canvas.create_text(
        306.0+65,
        107.0,
        anchor="nw",
        text="OR",
        fill="#FFFFFF",
        font=("Inter", 20 * -1)
    )

    canvas.create_text(
        21.0,
        20.0,
        anchor="nw",
        text="GlyphSearch",
        fill="#FFFFFF",
        font=("Inter Bold", 36 * -1)
    )

    button_click(button_1,button_image_1,button_selected_image_1)
    display_current_wordlist()

    window.resizable(False, False)
    window.mainloop()


if __name__ == "__main__":
    main()
    # button_click(button_1,button_image_1,button_selected_image_1)